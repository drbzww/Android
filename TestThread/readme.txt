
1 共享数据操作的同步
在java语言中，引入了 对象互斥锁 的概念来实现不同线程对共享数据操作的实现。对象互斥锁 阻止多个线程同时
访问同一个 条件变量（就是synchronized后面跟的变量，通常是this，所以可以直接将其放到方法返回值前），
java可以为每一个实例配一个 对象互斥锁，且只有对象才可以被放到synchronized后面的括号中。

在java语言中，有两种方法实现 对象互斥锁：
1> 用关键字volatile来声明一个共享数据。
2> 用关键字synchronized来声明一个操作共享数据的方法、一段代码。

第一种方法很少被使用，第二种方法更多被使用，用关键字synchronized来声明一段代码比声明一个方法更加高效。


2 android开发之synchronized的用法

在android开发中synchronized主要有四种用法。第一是在方法声明时使用；
第二是在对某一代码块时使用。具体的实现代码如下：

2.1 方法声明时使用

放在范围操作符(public等)之后,返回类型声明(void等)之前.这时,线程获得的是方法中this实例的对象锁,
即一次只能有一个线程进入该方法,其他线程要想在此时调用该方法,由于获得不到对像锁只能排队等候,
当前线程执行完该方法后就会释放对象锁,别的线程才能进入。

例如:
public synchronized void synMethod() {
//方法体
}

2.2 对某一代码块使用

synchronized后跟括号,括号里是变量（只能是对象）,这样,一次只有一个线程进入该代码块.此时,线程获得的是成员锁.例如:
public void synMethod(Integer a1){
synchronized(a1) {
//一次只能有一个线程进入
}
}

3 举例说明
如果stack中的两个方法pop和push不加上synchronized就会生成数组越界异常。




