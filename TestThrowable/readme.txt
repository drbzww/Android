1 异常与错误的概述

为了处理的更加灵活，java把程序运行时可能遇到的错误分为两类。一类是非致命性的，通过某种修正后程序还能继续
执行，这类错误称作异常(Exception)，也称为例外，如打开一个文件时，发现文件不存在；又比如除零溢出、数组
越界等，这一类的错误可以借助于程序员的干涉来恢复。另一类是致命性的，即程序遇到了非常严重的不正常状态，
不能简单的恢复运行，这就是错误(Error)，比如程序运行过程中内存耗尽。

java中定义了Exception类和Error来对应上面提到的异常和错误。这两个类有一个共同的父类Throwable，Throwable
类也只有这两个子类，Exception类有一个子类叫做RuntimeException。

1> Error : Error表示很难恢复的错误，如内存越界，一般不期望用户程序来处理，即使程序员有能力处理这种错误，
也还是交给系统处理为好。

2> RuntimeException : RuntimeException用来表示设计或实现方面的问题，如数组越界等，因为设计和实现正确
的程序不会引发这类异常，所以常常不处理它。发生这类异常时，运行环境会输出一条信息，提示用户修正错误。

3> 其他异常表示运行时因环境的影响可能发生并可被处理的问题，如文件没有找到或者不完整的URL等，因为用户的错误
很可能导致这类问题发生，比如用户键入的内容不正确，所以java鼓励程序员处理它们。

由上面的最后的分类解释可以知道 Error交给系统处理，RuntimeException是程序设计或实现的错误，由程序员自行
修改，所以我们主要处理和关注的是除了RuntimeException和Error的异常。

2 异常的抛出和捕获处理

2.1 在一个方法的运行过程中，如果发生了异常，称程序产生了一个异常事件，相应的生成异常对象。该对象可能
由正在运行的方法生成，也可能由虚拟机生成。生成的异常对象传递给运行时系统，运行时系统寻找相应的代码来处理
这一异常。我们将生成异常并把它提交给运行时系统的这一过程称作抛出(Throw)一个异常。

2.2 异常发生时，运行时系统从生成对象的代码块开始回溯，沿方法的调用栈逐层回溯，寻找相应的处理代码，直到
找到包含相应异常处理的方法为止，并把异常对象交给该方法处理，这一过程称为捕获(catch)。

3 举例验证问题

3.1 当异常被捕获后，catch中代码块被执行后，后续代码会继续执行。
由TestCatchException中的testArrayOutOf方法验证。

3.2 只有保护代码块中执行System.exit()方法时，finally中的代码块才不会被执行。






